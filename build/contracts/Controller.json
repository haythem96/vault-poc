{
  "contractName": "Controller",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.6.9+commit.3e3065ac\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{},\"notice\":\"using the commented implementation, we will encounter stack too deep error\"}},\"settings\":{\"compilationTarget\":{\"/Users/haythem96/Projects/testStruct/contracts/impl1/Controller.sol\":\"Controller\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/haythem96/Projects/testStruct/contracts/impl1/Controller.sol\":{\"keccak256\":\"0xc1fc21869bdb9c32e029f0a20e82b7baa6a9abcb3bfa2813732d489491000d5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d6a76bfb03f597662bebd4a3e71a515aff16c40768e36c5cf3b92f8794cca72\",\"dweb:/ipfs/QmRSiq6gNZcvr85bU8HVLqbAgY8ExEwcYUsEbJsz8BKM6P\"]},\"/Users/haythem96/Projects/testStruct/contracts/impl1/MarginAccountLib.sol\":{\"keccak256\":\"0x685013cba7133c031f529870e96485f248d05c2d59b7395347fe95feadbe3422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5b444b136eea3ca8c812a1cdba236b831ee104b1320f8e1022c02ca0f2804c8d\",\"dweb:/ipfs/QmWK7bpfEWAK596K8P1z827wKuMmAaYwFTRy9Ff3LqU2dZ\"]},\"/Users/haythem96/Projects/testStruct/contracts/impl1/MarginCalculator.sol\":{\"keccak256\":\"0x9d384415d1c703104348cf88436341c1c729ea7e4b46f9df94163ee91fc7793a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cb152db767593d0ea8fb53ab8d1d43560e4b6b3d4e681aad83c6b69a7d707259\",\"dweb:/ipfs/QmdYh63QwFmL19bYvcUBk9jK9Eec8WKS3VvSLDnvDsgywk\"]}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212202d7e1e7d2870ce144c71f20187de2c02a59f3fe83d7fa1fde5bb8beadd629df364736f6c63430006090033",
  "deployedBytecode": "0x6080604052600080fdfea26469706673582212202d7e1e7d2870ce144c71f20187de2c02a59f3fe83d7fa1fde5bb8beadd629df364736f6c63430006090033",
  "sourceMap": "245:3418:1:-:0;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "245:3418:1:-:0;;;;;",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.9;\n\n\npragma experimental ABIEncoderV2;\n\nimport \"./MarginAccountLib.sol\";\nimport \"./MarginCalculator.sol\";\n\n///@notice using the commented implementation, we will encounter stack too deep error\ncontract Controller {\n    \n    /*using MarginAccountLib for MarginAccountLib.Account;\n    using MarginAccountLib for MarginAccountLib.Vault;\n\n    MarginCalculator calculator;\n\n    mapping(address => MarginAccountLib.Account) internal accounts;\n    mapping(address => mapping(uint256 => MarginAccountLib.Vault)) internal accountVaults;\n\n    constructor(address _calculator) public {\n        calculator = MarginCalculator(_calculator);\n    }\n\n    uint256[] a;\n\n    constructor() public {\n        a[2] = 5;\n    }\n\n    h(a);\n    f(a);\n    \n\n    function h(uint256[] memory _a) external {\n        _a[2] = 6;\n    }\n\n    function f(uint256[] storage _a) external {\n        _a[2] = 6;\n    }\n\n\n\n    function getVaultCounter(address _user) external view returns (uint256) {\n        MarginAccountLib.Account storage account = accounts[_user];\n\n        return account.vaultCounter;\n    }\n\n    function getVault(address _user, uint256 _vaultId) external view returns (\n        address[] memory shortAssets,\n\t\taddress[] memory longAssets,\n\t\taddress[] memory collAssets,\n\t\tuint256[] memory shortAmount,\n\t\tuint256[] memory longAmount,\n\t\tuint256[] memory collAmount\n    ) {\n        MarginAccountLib.Account storage account = accounts[_user];\n\n        require(account.vaultCounter >= _vaultId, \"error vault id\");\n\n\t\t(shortAssets, longAssets, collAssets, shortAmount, longAmount, collAmount) = accountVaults[_user][_vaultId].getVault();\n\t}\n\n    function openVault(\n\t\taddress[] memory _shortAssets,\n\t\taddress[] memory _longAssets,\n\t\taddress[] memory _collAssets,\n\t\tuint256[] memory _shortAmounts,\n\t\tuint256[] memory _longAmounts,\n\t\tuint256[] memory _collAmounts,\n        address _user\n    ) external {\n        require(_shortAssets.length == _shortAmounts.length, \"error length\");\n        require(_longAssets.length == _longAmounts.length, \"error length\");\n        require(_collAssets.length == _collAmounts.length, \"error length\");\n\n        MarginAccountLib.Account storage account = accounts[_user];\n\n        accountVaults[_user][account.vaultCounter].updateOnOpen(\n            account,\n            _shortAssets,\n            _longAssets,\n            _collAssets,\n            _shortAmounts,\n            _longAmounts,\n            _collAmounts\n        );\n    }\n\n    struct RemarginVault {\n        address[] shortAssets;\n\t\taddress[] longAssets;\n\t\taddress[] collAssets;\n\t\tuint256[] shortAmounts;\n\t\tuint256[] longAmounts;\n\t\tuint256[] collAmounts;\n        uint8[] shortOp;\n\t\tuint8[] longOp;\n\t\tuint8[] collOp;\n    }\n\n    function checkMarginRequirement(\n        RemarginVault storage modificationVault,\n        address _user,\n        uint256 _vaultId\n    ) external view returns (bool, uint256) {\n        MarginAccountLib.Vault memory vault = accountVaults[_user][_vaultId];\n\n        for(uint8 i = 0; i<modificationVault.shortOp.length; i++) {\n\t\t\tvault.shortAmount[modificationVault.shortAssets[i]] += modificationVault.shortAmounts[i];\n\t\t}\n\n        //vault = MarginAccountLib.updateShort(vault, modificationVault.shortAssets, modificationVault.shortAmounts, modificationVault.shortOp);\n        \n        //calculator.marginRequirement(vaultFinalState);\n    }\n\n    function closeVault(\n        address _user,\n        uint256 _vaultId\n    ) external {\n        MarginAccountLib.Account memory account = accounts[_user];\n\n        require(account.vaultCounter >= _vaultId, \"error vault id\");\n\n        delete accountVaults[_user][_vaultId];\n    }*/\n\n}",
  "sourcePath": "/Users/haythem96/Projects/testStruct/contracts/impl1/Controller.sol",
  "ast": {
    "absolutePath": "/Users/haythem96/Projects/testStruct/contracts/impl1/Controller.sol",
    "exportedSymbols": {
      "Controller": [
        43
      ]
    },
    "id": 44,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 38,
        "literals": [
          "solidity",
          "0.6",
          ".9"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:22:1"
      },
      {
        "id": 39,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "57:33:1"
      },
      {
        "absolutePath": "/Users/haythem96/Projects/testStruct/contracts/impl1/MarginAccountLib.sol",
        "file": "./MarginAccountLib.sol",
        "id": 40,
        "nodeType": "ImportDirective",
        "scope": 44,
        "sourceUnit": 48,
        "src": "92:32:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/haythem96/Projects/testStruct/contracts/impl1/MarginCalculator.sol",
        "file": "./MarginCalculator.sol",
        "id": 41,
        "nodeType": "ImportDirective",
        "scope": 44,
        "sourceUnit": 53,
        "src": "125:32:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 42,
          "nodeType": "StructuredDocumentation",
          "src": "159:86:1",
          "text": "@notice using the commented implementation, we will encounter stack too deep error"
        },
        "fullyImplemented": true,
        "id": 43,
        "linearizedBaseContracts": [
          43
        ],
        "name": "Controller",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 44,
        "src": "245:3418:1"
      }
    ],
    "src": "32:3631:1"
  },
  "legacyAST": {
    "absolutePath": "/Users/haythem96/Projects/testStruct/contracts/impl1/Controller.sol",
    "exportedSymbols": {
      "Controller": [
        43
      ]
    },
    "id": 44,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 38,
        "literals": [
          "solidity",
          "0.6",
          ".9"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:22:1"
      },
      {
        "id": 39,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "57:33:1"
      },
      {
        "absolutePath": "/Users/haythem96/Projects/testStruct/contracts/impl1/MarginAccountLib.sol",
        "file": "./MarginAccountLib.sol",
        "id": 40,
        "nodeType": "ImportDirective",
        "scope": 44,
        "sourceUnit": 48,
        "src": "92:32:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/haythem96/Projects/testStruct/contracts/impl1/MarginCalculator.sol",
        "file": "./MarginCalculator.sol",
        "id": 41,
        "nodeType": "ImportDirective",
        "scope": 44,
        "sourceUnit": 53,
        "src": "125:32:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 42,
          "nodeType": "StructuredDocumentation",
          "src": "159:86:1",
          "text": "@notice using the commented implementation, we will encounter stack too deep error"
        },
        "fullyImplemented": true,
        "id": 43,
        "linearizedBaseContracts": [
          43
        ],
        "name": "Controller",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 44,
        "src": "245:3418:1"
      }
    ],
    "src": "32:3631:1"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.9+commit.3e3065ac.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.23",
  "updatedAt": "2020-07-06T23:02:05.828Z",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {},
    "notice": "using the commented implementation, we will encounter stack too deep error"
  }
}