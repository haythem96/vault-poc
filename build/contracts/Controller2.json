{
  "contractName": "Controller2",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.6.9+commit.3e3065ac\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/haythem96/Projects/testStruct/contracts/impl2/Controller2.sol\":\"Controller2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/haythem96/Projects/testStruct/contracts/impl2/Controller2.sol\":{\"keccak256\":\"0x949a91233608259750af7034701d6e119890f119138180a91ada01c5e4f2200b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://996a85121b214cb8d8c531b9fed452f8cf47a53818ed7d08c9bd06d64bc9b880\",\"dweb:/ipfs/QmSa5nLQrzzaqjoTkZJH9BWBWWgU7brd8CTrJfuCXggtth\"]}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220f784bebba7cee6a41f0caaa45718758c9b6d766b18aa2070f47e9938462c98ed64736f6c63430006090033",
  "deployedBytecode": "0x6080604052600080fdfea2646970667358221220f784bebba7cee6a41f0caaa45718758c9b6d766b18aa2070f47e9938462c98ed64736f6c63430006090033",
  "sourceMap": "165:4204:7:-:0;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "165:4204:7:-:0;;;;;",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.9;\n\n\npragma experimental ABIEncoderV2;\n\n//import \"./MarginAccountLib2.sol\";\n//import \"./MarginCalculator2.sol\";\n\ncontract Controller2 {\n    \n    /*using MarginAccountLib2 for MarginAccountLib2.Account;\n    using MarginAccountLib2 for MarginAccountLib2.Vault;\n\n    MarginCalculator2 calculator;\n\n    mapping(address => MarginAccountLib2.Account) internal accounts;\n    mapping(address => mapping(uint256 => MarginAccountLib2.Vault)) internal accountVaults;\n\n    constructor(address _calculator) public {\n        calculator = MarginCalculator2(_calculator);\n    }\n\n    function getVaultCounter(address _user) external view returns (uint256) {\n        MarginAccountLib2.Account storage account = accounts[_user];\n\n        return account.vaultCounter;\n    }\n\n    function openVault(\n\t\taddress[] memory _shortAssets,\n\t\taddress[] memory _longAssets,\n\t\taddress[] memory _collAssets,\n\t\tuint256[] memory _shortAmounts,\n\t\tuint256[] memory _longAmounts,\n\t\tuint256[] memory _collAmounts,\n        address _user\n    ) public {\n        require(_shortAssets.length == _shortAmounts.length, \"error length\");\n        require(_longAssets.length == _longAmounts.length, \"error length\");\n        require(_collAssets.length == _collAmounts.length, \"error length\");\n\n        MarginAccountLib2.Account storage account = accounts[_user];\n\n        accountVaults[_user][account.vaultCounter].updateOnOpen(\n            account,\n            _shortAssets,\n            _longAssets,\n            _collAssets,\n            _shortAmounts,\n            _longAmounts,\n            _collAmounts\n        );\n\n        uint256 marginRequirement = calculator.marginRequirement(accountVaults[_user][account.vaultCounter-1]);\n\n        require(marginRequirement == 0, \"margin fail\");\n    }\n\n    function closeVault(\n        uint256 _vaultId,\n        address[] memory _shortAssets,\n        address[] memory _longAssets,\n        address[] memory _collAssets,\n        uint256[] memory _shortAmounts,\n        uint256[] memory _longAmounts,\n        uint256[] memory _collAmounts\n    ) external {\n        require(_shortAssets.length == _shortAmounts.length, \"error length\");\n        require(_longAssets.length == _longAmounts.length, \"error length\");\n        require(_collAssets.length == _collAmounts.length, \"error length\");\n\n        MarginAccountLib2.Account memory account = accounts[msg.sender];\n\n        require(account.vaultCounter >= _vaultId, \"error vault id\");\n\n        delete accountVaults[msg.sender][_vaultId];\n    }\n\n    struct RemarginVault {\n        address[] shortAssets;\n\t\taddress[] longAssets;\n\t\taddress[] collAssets;\n\t\tuint256[] shortAmounts;\n\t\tuint256[] longAmounts;\n\t\tuint256[] collAmounts;\n        uint8[] index;\n\t\tuint8[] longOp;\n\t\tuint8[] collOp;\n    }\n\n    function checkMarginRequirement(\n        address _user,\n        uint256 _vaultId,\n        address[] memory _shortAssets,\n        address[] memory _longAssets,\n        address[] memory _collAssets,\n        uint256[] memory _shortAmounts,\n        uint256[] memory _longAmounts,\n        uint256[] memory _collAmounts\n    ) external view returns (bool, uint256) {\n        require(_shortAssets.length == _shortAmounts.length, \"error length\");\n        require(_longAssets.length == _longAmounts.length, \"error length\");\n        require(_collAssets.length == _collAmounts.length, \"error length\");\n\n        MarginAccountLib2.Vault memory vault = getVault(_user, _vaultId);\n        \n        vault.shortAmounts[0] = vault.shortAmounts[0] + _shortAmounts[0];\n        vault.longAmounts[0] = vault.longAmounts[0] + _longAmounts[0];\n\n        vault.collAmounts[0] = vault.collAmounts[0] + _collAmounts[0];\n\n        vault.shortAssets[0] = _shortAssets[0];\n        vault.longAssets[0] = _longAssets[0];\n\n        vault.collAssets[0] = _collAssets[0];\n\n        vault.increaseShortAsset(0, _shortAmounts[0]);\n\n        //calculator.marginRequirement(vault);\n    }\n\n    function getVault(address _user, uint256 _vaultId) public view returns (MarginAccountLib2.Vault memory) {\n        MarginAccountLib2.Account storage account = accounts[_user];\n\n        require(account.vaultCounter >= _vaultId, \"error vault id\");\n\n\t\tMarginAccountLib2.Vault memory vault = accountVaults[_user][_vaultId];\n\n\t\treturn vault;\n\t}\n\n    function bitShift(uint256 ui) external pure returns(uint256) {\n        return  ui<<31;\n    }*/\n\n}",
  "sourcePath": "/Users/haythem96/Projects/testStruct/contracts/impl2/Controller2.sol",
  "ast": {
    "absolutePath": "/Users/haythem96/Projects/testStruct/contracts/impl2/Controller2.sol",
    "exportedSymbols": {
      "Controller2": [
        584
      ]
    },
    "id": 585,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 582,
        "literals": [
          "solidity",
          "0.6",
          ".9"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:22:7"
      },
      {
        "id": 583,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "57:33:7"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 584,
        "linearizedBaseContracts": [
          584
        ],
        "name": "Controller2",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 585,
        "src": "165:4204:7"
      }
    ],
    "src": "32:4337:7"
  },
  "legacyAST": {
    "absolutePath": "/Users/haythem96/Projects/testStruct/contracts/impl2/Controller2.sol",
    "exportedSymbols": {
      "Controller2": [
        584
      ]
    },
    "id": 585,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 582,
        "literals": [
          "solidity",
          "0.6",
          ".9"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:22:7"
      },
      {
        "id": 583,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "57:33:7"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 584,
        "linearizedBaseContracts": [
          584
        ],
        "name": "Controller2",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 585,
        "src": "165:4204:7"
      }
    ],
    "src": "32:4337:7"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.9+commit.3e3065ac.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.23",
  "updatedAt": "2020-07-12T00:17:12.029Z",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}